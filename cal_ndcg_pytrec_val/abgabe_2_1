import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

def read_texts_to_list(file_name):
    with open(file_name, 'r') as f:
        x = f.readlines()
    data = x
    data = [text.strip() for text in data] #cut empty space
    data = [liste.split(" ") for liste in data] #text split to two vector components
    data = [[float(nr) for nr in liste] for liste in data] #cover texts to float numbers
    return data
def autocorrelation_matrix(data):
    A = np.zeros((2,2))
    def prod(v):
        v = np.array([v]).T
        return v.dot(v.T)
    for i in range(0,len(data)):
        A = A + prod(data[i]) #data[i] as vector
    A = A/len(data)
    return A
def eigenvalue_eigenvector(A):
    eigenwert, eigenvektor = np.linalg.eig(A)
    for i in range(len(eigenwert)):
        eigenvektor_a= eigenvektor[:,i].T
        print('Eigenvektor {}: \n{}'.format(i+1, eigenvektor_a))
        print('Eigenwert {}: {}'.format(i+1, eigenwert[i]))
        print(40 * '-')
    return eigenwert, eigenvektor
def display_data_eigenvector(file_name, data, eigenvektor):
    #data = np.array(read_texts_to_list(file_name))
    plt.figure(figsize=(10,10))
    plt.scatter(data[:, 0], data[:, 1], edgecolor='k', s=100) #data[:,0] =x_komponent; data[:,1] =y_komponent; 
    
    V = np.array([eigenvektor])
    origin = np.array([[0, 0],[0, 0]]) # origin point

    plt.quiver(*origin, V[:,0], V[:,1], color=['r'], scale=21)
    plt.title(file_name)
    plt.grid(True)
    plt.show
def solution(i):
    file_name="data_0"+str(i)+".dat"
    data = np.array(read_texts_to_list(file_name))
    A=autocorrelation_matrix(data)
    print(A)
    eigenwert, eigenvektor=eigenvalue_eigenvector(A)
    display_data_eigenvector(file_name,data, eigenvektor)


solution(1)
solution(2)
solution(3)
solution(4)
solution(5)